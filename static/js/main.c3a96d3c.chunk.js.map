{"version":3,"sources":["state/actionTypes/index.ts","state/reducers/cellsReducers.ts","state/reducers/bundlesReducers.ts","state/reducers/index.ts","state/store.ts","hooks/useTypedSelector.ts","bundler/plugins/unpkg-path-plugin.ts","bundler/plugins/fetch-plugin.ts","bundler/index.ts","state/actionCreators/index.ts","hooks/useActions.ts","components/ActionBar/index.tsx","components/TextEditor/index.tsx","components/CodeEditor/index.tsx","components/Resizable/index.tsx","components/Preview/index.tsx","hooks/useCumulativeCode.ts","components/CodeCell/index.tsx","components/CellListItem/index.tsx","components/AddCell/index.tsx","components/CellList/index.tsx","index.tsx"],"names":["ActionType","initialState","loading","error","order","data","randomId","Math","random","toString","produce","state","action","type","payload","UPDATE_CELL","id","content","DELETE_CELL","filter","MOVE_CELL","cellId","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","insertCellId","cellType","cell","foundIndex","push","splice","BUNDLE_START","code","BUNDLE_COMPLETE","bundledCellId","bundle","reducers","combineReducers","cells","bundles","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","dispatch","useTypedSelector","useSelector","unpkgPathPlugin","name","setup","build","onResolve","args","path","namespace","URL","resolveDir","href","a","fileCache","localForage","createInstance","fetchPlugin","inputCode","onLoad","loader","contents","getItem","cachedResult","axios","get","request","escaped","replace","result","responseURL","pathname","setItem","serviceInitialized","initializeEsBuild","esbuild","worker","wasmURL","rawCode","entryPoints","write","plugins","jsxFactory","jsxFragment","outputFiles","obj1","generatedCode","text","String","updateCell","insertAfterCell","deleteCell","moveCell","createBundle","input","useActions","useDispatch","useMemo","bindActionCreators","actionCreators","ActionBar","className","title","onClick","bind","TextEditor","editorRef","useRef","useState","editing","setEditing","useEffect","listener","event","target","current","contains","document","addEventListener","capture","removeEventListener","ref","toolbarHeight","value","onChange","Markdown","source","CodeEditor","defaultValue","handleChange","monacoEditorRef","unFormattedCode","getValue","formattedCode","prettier","format","parser","useTabs","semi","singleQuote","setValue","e","message","alert","console","onMount","editor","language","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","theme","height","Resizable","resizableProps","children","innerHeight","setInnerHeight","innerWidth","setInnerWidth","width","setWidth","minConstraints","Infinity","maxConstraints","resizeHandles","onResizeStop","_","size","timer","clearTimeout","setTimeout","html","Preview","iframe","srcdoc","contentWindow","postMessage","sandbox","srcDoc","useCumulativeCode","cumulativeCode","map","cellKey","join","CodeCell","max","CellListItem","child","AddCell","beforeCellId","forceVisible","CellList","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c3a96d3c.chunk.js","sourcesContent":["export enum ActionType {\n  MOVE_CELL = 'MOVE_CELL',\n  DELETE_CELL = 'DELETE_CELL',\n  INSERT_CELL_AFTER = 'INSERT_CELL_AFTER',\n  UPDATE_CELL = 'UPDATE_CELL',\n  BUNDLE_START = 'BUNDLE_START',\n  BUNDLE_COMPLETE = 'BUNDLE_COMPLETE'\n}","import produce from 'immer'\nimport { Cell } from '../cell'\nimport { Action } from '../actions'\nimport { ActionType } from '../actionTypes'\n\ninterface CellsState {\n    loading: boolean\n    error: string | null\n    order: string[]\n    data: {\n        [key: string]: Cell\n    }\n}\n\nconst initialState: CellsState = {\n    loading: true,\n    error: null,\n    order: [],\n    data: {},\n}\n\nfunction randomId () {\n    return Math.random().toString(36)\n}\n\nexport default produce(function cells (state: CellsState = initialState,\n    action: Action): CellsState {\n    const { type, payload } = action\n    switch (type) {\n        case ActionType.UPDATE_CELL:\n            const { id, content } = payload\n            state['data'][id].content = content\n            return state\n        case ActionType.DELETE_CELL:\n            delete state['data']['id']\n            state.order = state.order.filter(id => id !== payload)\n            return state\n        case ActionType.MOVE_CELL:\n            const { id: cellId, direction } = payload\n            const index = state.order.findIndex(id => cellId === id)\n            const targetIndex = direction === 'up' ? index - 1 : index + 1\n            if (targetIndex < 0 || targetIndex > state.order.length - 1) return state\n            state.order[index] = state.order[targetIndex]\n            state.order[targetIndex] = cellId\n            return state\n        case ActionType.INSERT_CELL_AFTER:\n            const { id: insertCellId, cellType } = payload\n            const cell: Cell = {\n                id: randomId(),\n                content: '',\n                type: cellType,\n            }\n            state['data'][cell['id']] = cell\n            const foundIndex = state.order.findIndex(id => id === insertCellId)\n            if (foundIndex) state.order.push(cell.id)\n            else state.order.splice(foundIndex + 1, 0, cell.id)\n            return state\n        default:\n            return state\n    }\n}, initialState)","import { Action } from '../actions'\nimport { ActionType } from '../actionTypes'\nimport produce from 'immer'\n\ninterface BundlesState {\n    [key: string]: {\n        loading: boolean\n        code: string\n        error: string\n    } | undefined\n}\n\nconst initialState: BundlesState = {}\n\nexport default produce(function bundles(state: BundlesState = initialState, action: Action): BundlesState {\n    const {type, payload} = action\n    switch (type) {\n        case ActionType.BUNDLE_START:\n            const {cellId} = payload\n            state[cellId] = {\n                loading: true,\n                code: '',\n                error: ''\n            }\n            return state\n        case ActionType.BUNDLE_COMPLETE:\n            const {cellId: bundledCellId, bundle: {code, error}} = payload\n            state[bundledCellId] = {loading: false, code, error}\n            return state\n        default:\n            return state\n    }\n}, initialState)","import {combineReducers} from 'redux'\nimport cells from './cellsReducers'\nimport bundles from './bundlesReducers'\n\nexport const reducers = combineReducers({\n  cells, bundles\n})\n\nexport type RootState = ReturnType<typeof reducers>\n\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport { reducers } from './reducers'\nimport thunk from 'redux-thunk'\nimport { ActionType } from './actionTypes'\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n    reducers,\n    {},\n    composeEnhancers(applyMiddleware(thunk))\n)\n\nstore.dispatch({\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id: null,\n      cellType: 'code'\n    }\n})\n\nexport default store","import { TypedUseSelectorHook, useSelector } from 'react-redux'\nimport { RootState } from '../state/reducers'\n\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n\nexport default useTypedSelector","import * as esbuild from 'esbuild-wasm'\n\nexport const unpkgPathPlugin = () => {\n  return {\n    name: 'unpkg-path-plugin',\n    setup(build: esbuild.PluginBuild) {\n      // Load main index.js file\n      build.onResolve(\n          {filter: /^index\\.js$/},\n          (args: any) => ({path: args.path, namespace: 'a'}),\n      )\n      // Load relative module files\n      build.onResolve(\n          {filter: /^\\.+\\//},\n          (args: any) => ({\n            namespace: 'a',\n            path: new URL(args.path,\n                `https://unpkg.com${args.resolveDir}/`).href,\n          }))\n      // Load module main file\n      build.onResolve({filter: /.*/}, async (args: any) => {\n        return {\n          path: `https://unpkg.com/${args.path}`,\n          namespace: 'a',\n        }\n      })\n    },\n  }\n}","import * as esbuild from 'esbuild-wasm'\nimport axios from 'axios'\nimport localForage from 'localforage'\n\nconst fileCache = localForage.createInstance({name: 'fileCache'})\n\nexport const fetchPlugin = (inputCode: string) => {\n  return {\n    name: 'fetch-plugin',\n    setup(build: esbuild.PluginBuild) {\n      // Load main index.js file\n      build.onLoad({filter: /^index\\.js$/}, (args: any) => ({loader: 'jsx', contents: inputCode}))\n\n      // Load module if cached\n      build.onLoad({filter: /\\.*/}, async (args: any) => {\n        const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path)\n        if (cachedResult) return cachedResult\n      })\n\n      // Load css module files\n      build.onLoad({filter: /\\.css$/}, async (args: any) => {\n        const {data, request} = await axios.get(args.path)\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\")\n        const contents = `\n            const style = document.createElement('style')\n            style.innerText = '${escaped}'\n            document.head.appendChild(style)\n        `\n        const result: esbuild.OnLoadResult = {\n          loader: 'css',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        }\n        await fileCache.setItem(args.path, result)\n        return result\n      })\n\n      build.onLoad({filter: /.*/, namespace: 'a'}, async (args: any) => {\n        const {data, request} = await axios.get(args.path)\n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        }\n        await fileCache.setItem(args.path, result)\n        return result\n      })\n    },\n  }\n}","import * as esbuild from 'esbuild-wasm'\nimport { unpkgPathPlugin } from './plugins/unpkg-path-plugin'\nimport { fetchPlugin } from './plugins/fetch-plugin'\n\nlet serviceInitialized: boolean = false\n\nasync function initializeEsBuild () {\n    await esbuild.initialize({\n        worker: true,\n        wasmURL: 'https://unpkg.com/esbuild-wasm@0.14.48/esbuild.wasm'\n    })\n    serviceInitialized = true\n}\n\ninterface BundleResult {\n    code: string\n    error: string\n}\n\nasync function build (rawCode: string): Promise<BundleResult> {\n    try {\n        const { outputFiles: [obj1] } = await esbuild.build({\n            entryPoints: ['index.js'],\n            bundle: true,\n            write: false,\n            plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n            jsxFactory: '_React.createElement',\n            jsxFragment: '_React.Fragment'\n        })\n        const { text: generatedCode } = obj1\n        return { code: generatedCode, error: '' }\n    } catch (e: unknown) {\n        return { code: '', error: String(e) }\n    }\n}\n\nexport default async function bundle (rawCode: string) {\n    if (!serviceInitialized) await initializeEsBuild()\n    return await build(rawCode)\n}","import { Action, DeleteCellAction, Direction, InsertAfterCellAction, MoveCellAction, UpdateCellAction } from '../actions'\nimport { ActionType } from '../actionTypes'\nimport { CellTypes } from '../cell'\nimport { Dispatch } from 'react'\nimport bundle from '../../bundler'\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id, content\n    }\n  }\n}\n\nexport const insertAfterCell = (id: string | null, cellType: CellTypes): InsertAfterCellAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      cellType\n    }\n  }\n}\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  }\n}\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id, direction\n    }\n  }\n}\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async function(dispatch: Dispatch<Action>) {\n      dispatch({\n        type: ActionType.BUNDLE_START,\n        payload: {\n          cellId\n        }\n      })\n    const {code, error} = await bundle(input)\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId, bundle: {code, error}\n      }\n    })\n  }\n}","import { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as actionCreators from '../state/actionCreators'\nimport { useMemo } from 'react'\n\nconst useActions = function () {\n    const dispatch = useDispatch()\n    return useMemo(\n        () => {\n            return bindActionCreators(actionCreators, dispatch)\n        },\n        [dispatch]\n    )\n}\n\nexport default useActions","import React from 'react'\nimport './actionBar.css'\nimport useActions from '../../hooks/useActions'\n\ninterface ActionBarProps {\n    cellId: string\n}\n\nconst ActionBar: React.FC<ActionBarProps> = ({ cellId}) => {\n    const { moveCell, deleteCell } = useActions()\n    return (\n        <div className='action-bar'>\n            <button title='Move up cell' className='btn btn-sm btn-success action-btn'\n                    onClick={moveCell.bind(null, cellId, 'up')}>\n                <i className=\"bi bi-arrow-up\"/>\n            </button>\n            <button title='Move down cell' className='btn btn-sm btn-warning action-btn'\n                    onClick={moveCell.bind(null, cellId, 'down')}>\n                <i className=\"bi bi-arrow-down\"/>\n            </button>\n            <button title='Delete cell' className='btn btn-sm btn-danger action-btn'\n                    onClick={deleteCell.bind(null, cellId)}>\n                <i className=\"bi bi-x\"/>\n            </button>\n        </div>\n    )\n}\n\nexport default ActionBar","import './textEditor.css'\nimport React, { useEffect, useRef, useState } from 'react'\nimport Meditor from '@uiw/react-md-editor'\nimport { Cell } from '../../state/cell'\nimport useActions from '../../hooks/useActions'\nimport ActionBar from '../ActionBar'\n\ninterface TextEditorCellProps {\n    cell: Cell\n}\n\nconst TextEditor: React.FC<TextEditorCellProps> = ({ cell }) => {\n    const editorRef = useRef<HTMLDivElement | null>(null)\n    const [editing, setEditing] = useState<boolean>(false)\n    const { updateCell } = useActions()\n    useEffect(() => {\n        const listener = function (event: MouseEvent) {\n            if (!(event.target && editorRef.current &&\n                editorRef.current.contains(event.target as Node))) {\n                setEditing(false)\n            }\n        }\n        document.addEventListener('click', listener, { capture: true })\n        return () => document.removeEventListener('click', listener,\n            { capture: true })\n    }, [])\n    if (!editing) return (<div className='card card-body pb-5'>\n        <ActionBar cellId={cell.id}/>\n        <div title='Click to edit' className='text-editor'\n             onClick={setEditing.bind(null, true)}>\n            <Meditor.Markdown source={cell.content || '```# Click to edit```'}/>\n        </div>\n    </div>)\n    return (\n        <div ref={editorRef} className='text-editor card text-cell'>\n            <ActionBar cellId={cell.id}/>\n            <Meditor toolbarHeight={50}\n                     value={cell.content}\n                     onChange={value => updateCell(cell.id, value || '')}/>\n        </div>\n    )\n}\n\nexport default TextEditor","import './codeEditor.css'\nimport React, {useRef} from 'react'\nimport MonacoEditor, {OnChange, OnMount} from '@monaco-editor/react'\nimport prettier from 'prettier'\nimport parser from 'prettier/parser-babel'\n\ninterface CodeEditorProps {\n  defaultValue?: string,\n  value: string,\n  handleChange: OnChange\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({defaultValue, value, handleChange}) => {\n  const monacoEditorRef = useRef<any>(null)\n\n  function handleFormat() {\n    try {\n      const unFormattedCode = monacoEditorRef.current.getValue()\n      const formattedCode = prettier.format(unFormattedCode, {\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: true,\n        semi: false,\n        singleQuote: true\n      }).replace(/\\n$/, '')\n      monacoEditorRef.current.setValue(formattedCode)\n    } catch (e) {\n      const message = String(e)\n      alert(message)\n      console.error(e)\n    }\n  }\n\n  const handleMount: OnMount = (editor) => {\n    monacoEditorRef.current = editor\n  }\n\n  return (\n      <div className='editor-wrapper'>\n        {monacoEditorRef.current &&\n        <button className='btn btn-sm btn-outline-success format-btn px-1 py-0'\n                title='Format code'\n                onClick={handleFormat}>\n          <i className=\"bi bi-code-square\"/>\n        </button>}\n        <MonacoEditor\n            value={value}\n            onMount={handleMount}\n            defaultValue={defaultValue}\n            language='javascript'\n            onChange={handleChange}\n            options={{\n              wordWrap: 'on',\n              minimap: {enabled: false},\n              showUnused: true,\n              folding: false,\n              lineNumbersMinChars: 3,\n              fontSize: 16,\n              scrollBeyondLastLine: false,\n              automaticLayout: true\n            }}\n            theme='vs-dark'\n            height='100%'/>\n      </div>\n  )\n}\n\nexport default CodeEditor","import './resizable.css'\nimport React, {PropsWithChildren, useEffect, useState} from 'react'\nimport {ResizableBox, ResizableBoxProps} from 'react-resizable'\n\ninterface ResizableProps {\n  direction: 'horizontal' | 'vertical'\n}\n\nconst Resizable: React.FunctionComponent<PropsWithChildren<ResizableProps>> = ({direction, children}) => {\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight)\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth)\n  const [width, setWidth] = useState(window.innerWidth * 0.5)\n  let resizableProps: ResizableBoxProps\n  if (direction === 'vertical') {\n    resizableProps = {\n      minConstraints: [Infinity, 24],\n      maxConstraints: [Infinity, innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s']\n    }\n  } else {\n    resizableProps = {\n      className: 'resize-horizontal',\n      minConstraints: [innerWidth * 0.2, Infinity],\n      maxConstraints: [innerWidth * 0.5, Infinity],\n      height: Infinity,\n      width: width,\n      resizeHandles: ['e'],\n      onResizeStop: function(_, data) {\n        setWidth(data.size.width)\n      }\n    }\n  }\n  useEffect(() => {\n    const listener = function() {\n      let timer: any\n      if (timer) clearTimeout(timer)\n      timer = setTimeout(() => {\n        setInnerHeight(window.innerHeight)\n        setInnerWidth(window.innerWidth)\n        if (window.innerWidth < width) {\n          setWidth(window.innerWidth * 0.5)\n        }\n      }, 200)\n    }\n    window.addEventListener('resize', listener)\n    return function() {\n      window.removeEventListener('resize', listener)\n    }\n  }, [width])\n  return (\n      <ResizableBox {...resizableProps}>\n        {children}\n      </ResizableBox>\n  )\n}\n\nexport default Resizable","import './preview.css'\nimport React, { useEffect, useRef } from 'react'\n\ninterface PreviewProps {\n    code: string,\n    title?: string,\n    error: string\n}\n\nconst html = `<html lang=\"en\">\n              <head>\n              <title>Preview</title>\n              <style>html {background-color: inherit;}</style>\n              </head>\n              <body><div id=\"root\"/></body>\n              <script>\n                  function handleError(error) {\n                    const root = document.querySelector('#root')\n                    root.innerHTML = '<div style=\"color: red; font-family: sans-serif;\"><h4>Error</h4>' + error + '</div>'\n                    console.error(error)\n                  }\n                  window.addEventListener('error', (event) => {\n                    event.preventDefault()\n                    handleError(event.error)\n                  })\n                  window.addEventListener('message', event => {\n                    try {\n                      eval(event.data)\n                    } catch (e) {\n                        handleError(e)  \n                    }\n                  }, false)\n                  </script>\n              </html> `\n\nconst Preview: React.FC<PreviewProps> = ({ code, error }) => {\n    const iframe = useRef<any>(null)\n    useEffect(() => {\n        iframe.current.srcdoc = html\n        setTimeout(() => {\n            iframe.current.contentWindow.postMessage(code, '*')\n        }, 50)\n    }, [code])\n    return (\n        <div className='preview-wrapper'>\n            <iframe title=\"preview\" sandbox=\"allow-scripts\" ref={iframe}\n                    srcDoc={html}/>\n            {error && <div className='preview-error'>{error}</div>}\n        </div>\n    )\n}\n\nexport default Preview","import useTypedSelector from './useTypedSelector'\n\nconst showFunc = `\n    import _React from 'react'\n    import _ReactDOM from 'react-dom'\n    var show = value => {\n        const root = document.querySelector('#root')\n        if (typeof value === 'object') {\n            if(value.$$typeof && value.props) {\n                _ReactDOM.render(value, root)\n            } else{\n                root.innerHTML = JSON.stringify(value)\n            }\n        } else {\n            root.innerHTML = value\n    }\n}`\n\nconst showFuncNoOp = `var show = () => {}`\n\nconst useCumulativeCode = function (cellId: string) {\n    return useTypedSelector(state => {\n        const {data, order} = state.cells\n        const cumulativeCode = []\n        const cells = order.map(id => data[id])\n        for (const cellKey in cells) {\n            const {type, content, id} = cells[cellKey]\n            if(type === 'code') {\n                if(id === cellId) {\n                    cumulativeCode.push(showFunc)\n                } else {\n                    cumulativeCode.push(showFuncNoOp)\n                }\n                cumulativeCode.push(content)\n            }\n            if(id === cellId) break\n        }\n        return cumulativeCode.join('\\n')\n    })\n}\n\nexport default useCumulativeCode","import React, { Fragment, useEffect } from 'react'\nimport './codeCell.css'\nimport CodeEditor from '../CodeEditor'\nimport Resizable from '../Resizable'\nimport { Cell } from '../../state/cell'\nimport useActions from '../../hooks/useActions'\nimport ActionBar from '../ActionBar'\nimport useTypedSelector from '../../hooks/useTypedSelector'\nimport Preview from '../Preview'\nimport useCumulativeCode from '../../hooks/useCumulativeCode'\n\ninterface CodeCellProps {\n    cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const { updateCell, createBundle } = useActions()\n    const bundle = useTypedSelector(state => state.bundles[cell.id])\n    const cumulativeCode = useCumulativeCode(cell.id)\n    useEffect(() => {\n        if (!bundle) {\n            createBundle(cell.id, cumulativeCode)\n            return\n        }\n        let timer: any\n        timer = setTimeout(async () => {\n            createBundle(cell.id, cumulativeCode)\n        }, 1000)\n        return clearTimeout.bind(null, timer)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cell.id, cumulativeCode, createBundle])\n    return (\n        <div className='code-cell-wrapper'>\n            <Resizable direction='vertical'>\n                <Fragment>\n                    <ActionBar cellId={cell.id}/>\n                    <div className='code-cell'>\n                        <Resizable direction='horizontal'>\n                            <CodeEditor handleChange={(value => value &&\n                                updateCell(cell.id, value))}\n                                        value={cell.content}/>\n                        </Resizable>\n                        <div className='progress-wrapper'>\n                            {!bundle || bundle.loading\n                                ?\n                                <progress\n                                    className='progress-bar-animated progress-cover'\n                                    max='100'>\n                                    Loading\n                                </progress>\n                                : <Preview code={bundle.code}\n                                           error={bundle.error}/>\n                            }\n                        </div>\n                    </div>\n                </Fragment>\n            </Resizable>\n        </div>\n    )\n}\n\nexport default CodeCell","import './cellListItem.css'\nimport React from 'react'\nimport { Cell } from '../../state/cell'\nimport TextEditor from '../TextEditor'\nimport CodeCell from '../CodeCell'\n\ninterface CellListItemProps {\n    cell: Cell\n}\n\nconst CellListItem: React.FC<CellListItemProps> = ({cell}) => {\n    let child: JSX.Element\n    if(cell.type === 'text') {\n        child = <TextEditor cell={cell}/>\n    } else {\n        child = <CodeCell cell={cell}/>\n    }\n    return (\n        <div className='cell-list-item'>\n            {child}\n        </div>\n    )\n}\n\nexport default CellListItem","import React from 'react'\nimport './addCell.css'\nimport useActions from '../../hooks/useActions'\n\ninterface AddCellProps {\n    beforeCellId: string | null,\n    forceVisible?: boolean\n}\n\nconst AddCell: React.FC<AddCellProps> = ({ beforeCellId, forceVisible = false }) => {\n    const { insertAfterCell } = useActions()\n    return (\n        <div className={`add-cell-wrapper ${forceVisible && 'force-visible'}`}>\n            <button className='btn btn-info mx-5'\n                    onClick={insertAfterCell.bind(null, beforeCellId, 'code')}>\n                <i className=\"bi bi-plus-circle\"/> {' '} Code\n            </button>\n            <button className='btn btn-info mx-5'\n                    onClick={insertAfterCell.bind(null, beforeCellId, 'text')}>\n                <i className=\"bi bi-plus-circle\"/> {' '} Text\n            </button>\n            <div className='divider'/>\n        </div>\n    )\n}\n\nexport default AddCell","import React, { Fragment } from 'react'\nimport useTypedSelector from '../../hooks/useTypedSelector'\nimport CellListItem from '../CellListItem'\nimport AddCell from '../AddCell'\n\nconst CellList: React.FC = () => {\n    const cells = useTypedSelector(\n        ({ cells: { order, data } }) => order.map(id => data[id]))\n    return (\n        <Fragment>\n            <AddCell forceVisible={cells.length === 0} beforeCellId={null}/>\n            <div className='my-5'>\n                {cells.map(cell => <Fragment key={cell.id}>\n                    <CellListItem cell={cell} key={cell.id}/>\n                    <AddCell beforeCellId={cell.id}/>\n                </Fragment>)}\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CellList","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-icons/font/bootstrap-icons.css'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport store from './state/store'\nimport CellList from './components/CellList'\n\nfunction App() {\n  return <div className='m-4 p-4'>\n    <Provider store={store}>\n      <CellList/>\n    </Provider>\n  </div>\n}\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}