{"version":3,"sources":["state/actionTypes/index.ts","components/TextEditor/index.tsx","state/reducers/cellsReducers.ts","state/reducers/index.ts","state/store.ts","index.tsx"],"names":["ActionType","TextEditor","editorRef","useRef","useState","editing","setEditing","value","setValue","useEffect","listener","event","target","current","contains","document","addEventListener","capture","removeEventListener","ref","className","onChange","onClick","bind","Markdown","source","initialState","loading","error","order","data","randomId","Math","random","toString","produce","state","action","type","payload","UPDATE_CELL","id","content","DELETE_CELL","filter","MOVE_CELL","cellId","direction","index","findIndex","targetIndex","length","INSERT_CELL_BEFORE","insertCellId","cellType","cell","foundIndex","push","splice","reducers","combineReducers","cells","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","getElementById"],"mappings":"qJAAYA,E,uDCyBGC,EArBc,WAC3B,IAAMC,EAAYC,iBAA8B,MAChD,EAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAA6B,YAAvD,mBAAOG,EAAP,KAAcC,EAAd,KAUA,OATAC,qBAAU,WACR,IAAMC,EAAW,SAASC,GACnBA,EAAMC,QAAUV,EAAUW,SAAWX,EAAUW,QAAQC,SAASH,EAAMC,SACzEN,GAAW,IAIf,OADAS,SAASC,iBAAiB,QAASN,EAAU,CAACO,SAAS,IAChD,kBAAMF,SAASG,oBAAoB,QAASR,EAAU,CAACO,SAAS,OACtE,IACEZ,EAID,qBAAKc,IAAKjB,EAAWkB,UAAU,6BAA/B,SAA4D,cAAC,IAAD,CAASb,MAAOA,EAAOc,SAAUb,MAJ3E,qBAAKY,UAAU,6BAA6BE,QAAShB,EAAWiB,KAAK,MAAM,GAA3E,SACpB,cAAC,IAAQC,SAAT,CAAkBC,OAAQlB,O,kCDlBlBP,K,sBAAAA,E,0BAAAA,E,wCAAAA,E,2BAAAA,M,KEcZ,IAAM0B,EAA2B,CAC7BC,SAAS,EACTC,MAAO,KACPC,MAAO,GACPC,KAAM,IAGV,SAASC,IACP,OAAOC,KAAKC,SAASC,SAAS,IAGjBC,mBAAQ,WAEU,IAD7BC,EAC4B,uDADRV,EACpBW,EAA4B,uCACrBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,QACb,OAAQD,GACJ,KAAKtC,EAAWwC,YACZ,IAAOC,EAAeF,EAAfE,GAAIC,EAAWH,EAAXG,QAEX,OADAN,EAAK,KAASK,GAAIC,QAAUA,EACrBN,EACX,KAAKpC,EAAW2C,YAGZ,cAFOP,EAAK,KAAL,GACPA,EAAMP,MAAQO,EAAMP,MAAMe,QAAO,SAAAH,GAAE,OAAIA,IAAOF,KACvCH,EACX,KAAKpC,EAAW6C,UACZ,IAAWC,EAAqBP,EAAzBE,GAAYM,EAAaR,EAAbQ,UACbC,EAAQZ,EAAMP,MAAMoB,WAAU,SAAAR,GAAE,OAAIK,IAAWL,KAC/CS,EAA4B,OAAdH,EAAqBC,EAAQ,EAAIA,EAAQ,EAC7D,OAAGE,EAAc,GAAKA,EAAcd,EAAMP,MAAMsB,OAAS,IACzDf,EAAMP,MAAMmB,GAASZ,EAAMP,MAAMqB,GACjCd,EAAMP,MAAMqB,GAAeJ,GAFwCV,EAIvE,KAAKpC,EAAWoD,mBACZ,IAAWC,EAA0Bd,EAA9BE,GAAkBa,EAAYf,EAAZe,SACnBC,EAAa,CACfd,GAAIV,IACJW,QAAS,GACTJ,KAAMgB,GAEVlB,EAAK,KAASmB,EAAI,IAAUA,EAC5B,IAAMC,EAAapB,EAAMP,MAAMoB,WAAU,SAAAR,GAAE,OAAIA,IAAOY,KAGtD,OAFGG,EAAYpB,EAAMP,MAAM4B,KAAKF,EAAKd,IAChCL,EAAMP,MAAM6B,OAAOF,EAAY,EAAGD,EAAKd,IACrCL,EACX,QACI,OAAOA,MCxDNuB,EAAWC,YAAgB,CACtCC,U,QCMIC,EAAmBC,OAAOC,sCAAwCC,IAQzDC,EANDC,YACVR,EACA,GACAG,EAAiBM,YAAgBC,OCLrC,SAASC,IACP,OAAO,qBAAKlD,UAAU,UAAf,SAEL,cAAC,IAAD,CAAU8C,MAAOA,EAAjB,SACE,cAAC,EAAD,QAKNK,IAASC,OAAO,cAACF,EAAD,IAAQvD,SAAS0D,eAAe,U","file":"static/js/main.e81711bc.chunk.js","sourcesContent":["export enum ActionType {\n  MOVE_CELL = 'MOVE_CELL',\n  DELETE_CELL = 'DELETE_CELL',\n  INSERT_CELL_BEFORE = 'INSERT_CELL_BEFORE',\n  UPDATE_CELL = 'UPDATE_CELL'\n}","import './textEditor.css'\nimport React, {useEffect, useRef, useState} from 'react'\nimport Meditor from '@uiw/react-md-editor'\n\nconst TextEditor: React.FC = () => {\n  const editorRef = useRef<HTMLDivElement | null>(null)\n  const [editing, setEditing] = useState<boolean>(false)\n  const [value, setValue] = useState<string | undefined>('# Header')\n  useEffect(() => {\n    const listener = function(event: MouseEvent) {\n      if(!(event.target && editorRef.current && editorRef.current.contains(event.target as Node))) {\n        setEditing(false)\n      }\n    }\n    document.addEventListener('click', listener, {capture: true})\n    return () => document.removeEventListener('click', listener, {capture: true})\n  }, [])\n  if (!editing) return (<div className='text-editor card card-body' onClick={setEditing.bind(null, true)}>\n    <Meditor.Markdown source={value}/>\n  </div>)\n  return (\n      <div ref={editorRef} className='text-editor card card-body'><Meditor value={value} onChange={setValue}/></div>\n  )\n}\n\nexport default TextEditor","import produce from 'immer'\nimport {Cell} from '../cell'\nimport {Action} from '../actions'\nimport {ActionType} from '../actionTypes'\n\ninterface CellsState {\n    loading: boolean\n    error: string | null\n    order: string[]\n    data: {\n        [key: string]: Cell\n    }\n}\n\nconst initialState: CellsState = {\n    loading: true,\n    error: null,\n    order: [],\n    data: {}\n}\n\nfunction randomId() {\n  return Math.random().toString(36)\n}\n\nexport default produce(function cells(\n    state: CellsState = initialState,\n    action: Action): CellsState {\n    const {type, payload} = action\n    switch (type) {\n        case ActionType.UPDATE_CELL:\n            const {id, content} = payload\n            state['data'][id].content = content\n            return state\n        case ActionType.DELETE_CELL:\n            delete state['data']['id']\n            state.order = state.order.filter(id => id !== payload)\n            return state\n        case ActionType.MOVE_CELL:\n            const {id: cellId, direction} = payload\n            const index = state.order.findIndex(id => cellId === id)\n            const targetIndex = direction === 'up' ? index - 1 : index + 1\n            if(targetIndex < 0 || targetIndex > state.order.length - 1) return state\n            state.order[index] = state.order[targetIndex]\n            state.order[targetIndex] = cellId\n            return state\n        case ActionType.INSERT_CELL_BEFORE:\n            const {id: insertCellId, cellType} = payload\n            const cell: Cell = {\n                id: randomId(),\n                content: '',\n                type: cellType\n            }\n            state['data'][cell['id']] = cell\n            const foundIndex = state.order.findIndex(id => id === insertCellId)\n            if(foundIndex) state.order.push(cell.id)\n            else state.order.splice(foundIndex, 0, cell.id)\n            return state\n        default:\n            return state\n    }\n})","import {combineReducers} from 'redux'\nimport cells from './cellsReducers'\n\nexport const reducers = combineReducers({\n  cells\n})\n\nexport type RootState = ReturnType<typeof reducers>\n\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport { reducers } from './reducers'\nimport thunk from 'redux-thunk'\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n    reducers,\n    {},\n    composeEnhancers(applyMiddleware(thunk))\n)\n\nexport default store","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-icons/font/bootstrap-icons.css'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport TextEditor from './components/TextEditor'\nimport {Provider} from 'react-redux'\nimport store from './state/store'\n\n// import CodeCell from './components/CodeCell'\n\nfunction App() {\n  return <div className='m-4 p-4'>\n    {/*<CodeCell/>*/}\n    <Provider store={store}>\n      <TextEditor/>\n    </Provider>\n  </div>\n}\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}