{"version":3,"sources":["state/actionTypes/index.ts","state/reducers/cellsReducers.ts","state/reducers/bundlesReducers.ts","state/reducers/index.ts","bundler/plugins/unpkg-path-plugin.ts","bundler/plugins/fetch-plugin.ts","bundler/index.ts","state/actionCreators/index.ts","state/middlewares/persist-middleware.ts","state/store.ts","hooks/useTypedSelector.ts","hooks/useActions.ts","components/ActionBar/index.tsx","components/TextEditor/index.tsx","components/CodeEditor/index.tsx","components/Resizable/index.tsx","components/Preview/index.tsx","hooks/useCumulativeCode.ts","components/CodeCell/index.tsx","components/CellListItem/index.tsx","components/AddCell/index.tsx","components/CellList/index.tsx","index.tsx"],"names":["ActionType","defaultCells","initialState","loading","error","order","map","id","data","reduce","acc","val","randomId","Math","random","toString","produce","state","action","type","SAVE_CELLS_ERROR","payload","FETCH_CELLS_START","FETCH_CELLS_COMPLETE","cell","FETCH_CELLS_ERROR","UPDATE_CELL","content","DELETE_CELL","filter","MOVE_CELL","cellId","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","insertCellId","cellType","foundIndex","push","splice","BUNDLE_START","code","BUNDLE_COMPLETE","bundledCellId","bundle","reducers","combineReducers","cells","bundles","unpkgPathPlugin","name","setup","build","onResolve","args","path","namespace","URL","resolveDir","href","a","fileCache","localForage","createInstance","fetchPlugin","inputCode","onLoad","loader","contents","getItem","cachedResult","axios","get","request","escaped","replace","result","responseURL","pathname","setItem","serviceInitialized","initializeEsBuild","esbuild","worker","wasmURL","rawCode","entryPoints","write","plugins","jsxFactory","jsxFragment","outputFiles","obj1","generatedCode","text","String","updateCell","insertAfterCell","deleteCell","moveCell","createBundle","input","dispatch","fetchCells","message","saveCells","getState","post","persistMiddleware","store","timer","next","includes","clearTimeout","setTimeout","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","useActions","useDispatch","useMemo","bindActionCreators","actionCreators","ActionBar","className","title","onClick","bind","TextEditor","editorRef","useRef","useState","editing","setEditing","useEffect","listener","event","target","current","contains","document","addEventListener","capture","removeEventListener","ref","toolbarHeight","value","onChange","Markdown","source","CodeEditor","defaultValue","handleChange","monacoEditorRef","unFormattedCode","getValue","formattedCode","prettier","format","parser","useTabs","semi","singleQuote","setValue","e","alert","console","onMount","editor","language","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","theme","height","Resizable","resizableProps","children","innerHeight","setInnerHeight","innerWidth","setInnerWidth","width","setWidth","minConstraints","Infinity","maxConstraints","resizeHandles","onResizeStop","_","size","html","Preview","iframe","srcdoc","contentWindow","postMessage","sandbox","srcDoc","useCumulativeCode","cumulativeCode","cellKey","join","CodeCell","max","CellListItem","child","AddCell","beforeCellId","forceVisible","CellList","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.34206598.chunk.js","sourcesContent":["export enum ActionType {\n  MOVE_CELL = 'MOVE_CELL',\n  DELETE_CELL = 'DELETE_CELL',\n  INSERT_CELL_AFTER = 'INSERT_CELL_AFTER',\n  UPDATE_CELL = 'UPDATE_CELL',\n  BUNDLE_START = 'BUNDLE_START',\n  BUNDLE_COMPLETE = 'BUNDLE_COMPLETE',\n  FETCH_CELLS_START = 'FETCH_CELLS_START',\n  FETCH_CELLS_COMPLETE = 'FETCH_CELLS_COMPLETE',\n  FETCH_CELLS_ERROR = 'FETCH_CELLS_ERROR',\n  SAVE_CELLS_ERROR = 'SAVE_CELLS_ERROR'\n}\n","import produce from 'immer'\nimport { Cell } from '../cell'\nimport { Action } from '../actions'\nimport { ActionType } from '../actionTypes'\n\nconst defaultCells = [\n    {\n        'id': '0.e4ngpwcl2jv',\n        'content': `\n            ## Yoriqulov Editor\n\n            This is an interactive coding environment. Yuu can write Javascript, see it executed and write comprehensive documentation using markdown.\n             - Click any text cell(including this one) to edit it.\n             - The code in each code editor is all joined together into one file. If you define variable in cell #1, you can refer to it in any following cell.\n             - You can show any React component, string, number or anything else by calling \\`show\\` function. This is a function is built into this environment.  Call \\`show\\` multiple times to show multiple values.\n             - Re-order or delete cells using buttons on the top right corner.\n             - Add new cell by hovering on the divider between each cell.\n            \n            All of your changes get saved on ther file you opened Yoriqulov Editor with. So if you run \\`npx yoriqulov-editor serve tets.js\\` , all of the code and text you write will bes saved on \\`test.js\\` file.\n        `,\n        'type': 'text'\n    },\n    {\n        'id': '0.rqmgcifhgtl',\n        'content': `\nimport { useState } from 'react'\n\nconst Counter = () => {\n    const [count, setCount] = useState(0)\n    return (\n        <div>\n            <button onClick={setCount.bind(null, count + 1)}>Click</button>\n            <h3>Count: {count}</h3>\n        </div>\n    )\n}\n\n// Display any variable or React Component by calling \\`show\\`\nshow(<Counter/>)\n        `,\n        'type': 'code'\n    }\n]\n\nconst defaultOrders = defaultCells.map(({id}) => id)\nconst defaultData = defaultCells.reduce((acc: {[key: string]: Cell}, val: any) => {\n    acc[val['id']] = val\n    return acc\n}, {} as CellsState['data'])\n\ninterface CellsState {\n    loading: boolean\n    error: string | null\n    order: string[]\n    data: {\n        [key: string]: Cell\n    }\n}\n\nconst initialState: CellsState = {\n    loading: true,\n    error: null,\n    order: defaultOrders,\n    data: defaultData\n}\n\nfunction randomId () {\n    return Math.random().toString(36)\n}\n\nexport default produce(function cells (\n    state: CellsState = initialState,\n    action: Action): CellsState {\n    const { type } = action\n    switch (type) {\n        case ActionType.SAVE_CELLS_ERROR:\n            state.error = action.payload\n            return state\n        case ActionType.FETCH_CELLS_START:\n            state.loading = true\n            state.error = null\n            return state\n        case ActionType.FETCH_CELLS_COMPLETE:\n            state.order = action.payload.map(({ id }) => id)\n            state.data = action.payload.reduce((acc, cell) => {\n                acc[cell.id] = cell\n                return acc\n            }, {} as CellsState['data'])\n            return state\n        case ActionType.FETCH_CELLS_ERROR:\n            state.loading = false\n            state.error = action.payload\n            return state\n        case ActionType.UPDATE_CELL:\n            const { id, content } = action.payload\n            state['data'][id].content = content\n            return state\n        case ActionType.DELETE_CELL:\n            delete state['data']['id']\n            state.order = state.order.filter(id => id !== action.payload)\n            return state\n        case ActionType.MOVE_CELL:\n            const { id: cellId, direction } = action.payload\n            const index = state.order.findIndex(id => cellId === id)\n            const targetIndex = direction === 'up' ? index - 1 : index + 1\n            if (targetIndex < 0 || targetIndex > state.order.length -\n                1) return state\n            state.order[index] = state.order[targetIndex]\n            state.order[targetIndex] = cellId\n            return state\n        case ActionType.INSERT_CELL_AFTER:\n            const { id: insertCellId, cellType } = action.payload\n            const cell: Cell = {\n                id: randomId(),\n                content: '',\n                type: cellType\n            }\n            state['data'][cell['id']] = cell\n            const foundIndex = state.order.findIndex(id => id === insertCellId)\n            if (foundIndex) state.order.push(cell.id)\n            else state.order.splice(foundIndex + 1, 0, cell.id)\n            return state\n        default:\n            return state\n    }\n}, initialState)\n","import { Action } from '../actions'\nimport { ActionType } from '../actionTypes'\nimport produce from 'immer'\n\ninterface BundlesState {\n    [key: string]: {\n        loading: boolean\n        code: string\n        error: string\n    } | undefined\n}\n\nconst initialState: BundlesState = {}\n\nexport default produce(function bundles(state: BundlesState = initialState, action: Action): BundlesState {\n    const {type} = action\n    switch (type) {\n        case ActionType.BUNDLE_START:\n            const {cellId} = action.payload\n            state[cellId] = {\n                loading: true,\n                code: '',\n                error: ''\n            }\n            return state\n        case ActionType.BUNDLE_COMPLETE:\n            const {cellId: bundledCellId, bundle: {code, error}} = action.payload\n            state[bundledCellId] = {loading: false, code, error}\n            return state\n        default:\n            return state\n    }\n}, initialState)\n","import {combineReducers} from 'redux'\nimport cells from './cellsReducers'\nimport bundles from './bundlesReducers'\n\nexport const reducers = combineReducers({\n  cells, bundles\n})\n\nexport type RootState = ReturnType<typeof reducers>\n\n","import * as esbuild from 'esbuild-wasm'\n\nexport const unpkgPathPlugin = () => {\n    return {\n        name: 'unpkg-path-plugin',\n        setup (build: esbuild.PluginBuild) {\n            // Load main index.ts file\n            build.onResolve(\n                { filter: /^(index\\.js)$/ },\n                (args: any) => ({ path: args.path, namespace: 'a' })\n            )\n            // Load relative module files\n            build.onResolve(\n                { filter: /^\\.+\\// },\n                (args: any) => ({\n                    namespace: 'a',\n                    path: new URL(args.path,\n                        `https://unpkg.com${args.resolveDir}/`).href\n                }))\n            // Load module main file\n            build.onResolve({ filter: /.*/ }, async (args: any) => {\n                return {\n                    namespace: 'a',\n                    path: `https://unpkg.com/${args.path}`\n                }\n            })\n        }\n    }\n}\n","import * as esbuild from 'esbuild-wasm'\nimport axios from 'axios'\nimport localForage from 'localforage'\n\nconst fileCache = localForage.createInstance({name: 'fileCache'})\n\nexport const fetchPlugin = (inputCode: string) => {\n  return {\n    name: 'fetch-plugin',\n    setup(build: esbuild.PluginBuild) {\n      // Load main index.js file\n      build.onLoad({filter: /^(index\\.js)$/}, (args: any) => ({loader: 'jsx', contents: inputCode}))\n\n      // Load module if cached\n      build.onLoad({filter: /\\.*/}, async (args: any) => {\n        const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path)\n        if (cachedResult) return cachedResult\n      })\n\n      // Load css module files\n      build.onLoad({filter: /\\.css$/}, async (args: any) => {\n        const {data, request} = await axios.get(args.path)\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\")\n        const contents = `\n            const style = document.createElement('style')\n            style.innerText = '${escaped}'\n            document.head.appendChild(style)\n        `\n        const result: esbuild.OnLoadResult = {\n          loader: 'css',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        }\n        await fileCache.setItem(args.path, result)\n        return result\n      })\n\n      build.onLoad({filter: /.*/, namespace: 'a'}, async (args: any) => {\n        const {data, request} = await axios.get(args.path)\n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname,\n        }\n        await fileCache.setItem(args.path, result)\n        return result\n      })\n    },\n  }\n}\n","import * as esbuild from 'esbuild-wasm'\nimport { unpkgPathPlugin } from './plugins/unpkg-path-plugin'\nimport { fetchPlugin } from './plugins/fetch-plugin'\n\nlet serviceInitialized: boolean = false\n\nasync function initializeEsBuild () {\n    await esbuild.initialize({\n        worker: true,\n        wasmURL: 'https://unpkg.com/esbuild-wasm@0.14.48/esbuild.wasm'\n    })\n    serviceInitialized = true\n}\n\ninterface BundleResult {\n    code: string\n    error: string\n}\n\nasync function build (rawCode: string): Promise<BundleResult> {\n    try {\n        const { outputFiles: [obj1] } = await esbuild.build({\n            entryPoints: ['index.js'],\n            bundle: true,\n            write: false,\n            plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n            jsxFactory: '_React.createElement',\n            jsxFragment: '_React.Fragment'\n        })\n        const { text: generatedCode } = obj1\n        return { code: generatedCode, error: '' }\n    } catch (e: unknown) {\n        return { code: '', error: String(e) }\n    }\n}\n\nexport default async function bundle (rawCode: string) {\n    if (!serviceInitialized) await initializeEsBuild()\n    return await build(rawCode)\n}\n","import { Action, DeleteCellAction, Direction, InsertAfterCellAction, MoveCellAction, UpdateCellAction } from '../actions'\nimport { ActionType } from '../actionTypes'\nimport { CellTypes } from '../cell'\nimport { Dispatch } from 'react'\nimport bundle from '../../bundler'\nimport axios from 'axios'\nimport { RootState } from '../reducers'\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n    return {\n        type: ActionType.UPDATE_CELL,\n        payload: {\n            id, content\n        }\n    }\n}\n\nexport const insertAfterCell = (\n    id: string | null, cellType: CellTypes): InsertAfterCellAction => {\n    return {\n        type: ActionType.INSERT_CELL_AFTER,\n        payload: {\n            id,\n            cellType\n        }\n    }\n}\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n    return {\n        type: ActionType.DELETE_CELL,\n        payload: id\n    }\n}\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n    return {\n        type: ActionType.MOVE_CELL,\n        payload: {\n            id, direction\n        }\n    }\n}\n\nexport const createBundle = (cellId: string, input: string) => {\n    return async function (dispatch: Dispatch<Action>) {\n        dispatch({\n            type: ActionType.BUNDLE_START,\n            payload: {\n                cellId\n            }\n        })\n        const { code, error } = await bundle(input)\n        dispatch({\n            type: ActionType.BUNDLE_COMPLETE,\n            payload: {\n                cellId, bundle: { code, error }\n            }\n        })\n    }\n}\n\nexport const fetchCells = () => {\n    return async function (dispatch: Dispatch<Action>) {\n        dispatch({\n            type: ActionType.FETCH_CELLS_START\n        })\n        try {\n            const { data } = await axios.get('/cells')\n            dispatch({\n                type: ActionType.FETCH_CELLS_COMPLETE,\n                payload: data\n            })\n        } catch (e: any) {\n            dispatch({\n                type: ActionType.FETCH_CELLS_ERROR,\n                payload: e.message\n            })\n        }\n    }\n}\n\nexport const saveCells = function () {\n    return async function (\n        dispatch: Dispatch<Action>, getState: () => RootState) {\n        try {\n            const { cells: { data, order } } = getState()\n            const cells = order.map(id => data[id])\n            await axios.post('/cells', { cells })\n        } catch (e: any) {\n            dispatch({\n                type: ActionType.SAVE_CELLS_ERROR,\n                payload: e.message\n            })\n        }\n    }\n}\n","import { Dispatch } from 'react'\nimport { Action } from '../actions'\nimport { ActionType } from '../actionTypes'\nimport { saveCells } from '../actionCreators'\nimport { RootState } from '../reducers'\n\nfunction persistMiddleware (store: { dispatch: Dispatch<Action>, getState: () => RootState }) {\n    let timer: any\n    return function (next: Dispatch<Action>) {\n        return function (action: Action) {\n            next(action)\n            const { getState, dispatch } = store\n            if ([\n                ActionType.MOVE_CELL,\n                ActionType.INSERT_CELL_AFTER,\n                ActionType.UPDATE_CELL,\n                ActionType.DELETE_CELL\n            ].includes(action.type)) {\n                if (timer) clearTimeout(timer)\n                timer = setTimeout(function () {\n                    saveCells()(dispatch, getState)\n                }, 250)\n            }\n        }\n    }\n}\n\nexport default persistMiddleware\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport { reducers } from './reducers'\nimport thunk from 'redux-thunk'\nimport persistMiddleware from './middlewares/persist-middleware'\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n    reducers,\n    {},\n    composeEnhancers(applyMiddleware(thunk, persistMiddleware))\n)\n\nexport default store\n","import { TypedUseSelectorHook, useSelector } from 'react-redux'\nimport { RootState } from '../state/reducers'\n\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n\nexport default useTypedSelector","import { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as actionCreators from '../state/actionCreators'\nimport { useMemo } from 'react'\n\nconst useActions = function () {\n    const dispatch = useDispatch()\n    return useMemo(\n        () => {\n            return bindActionCreators(actionCreators, dispatch)\n        },\n        [dispatch]\n    )\n}\n\nexport default useActions","import React from 'react'\nimport './actionBar.css'\nimport useActions from '../../hooks/useActions'\n\ninterface ActionBarProps {\n    cellId: string\n}\n\nconst ActionBar: React.FC<ActionBarProps> = ({ cellId}) => {\n    const { moveCell, deleteCell } = useActions()\n    return (\n        <div className='action-bar'>\n            <button title='Move up cell' className='btn btn-sm btn-success action-btn'\n                    onClick={moveCell.bind(null, cellId, 'up')}>\n                <i className=\"bi bi-arrow-up\"/>\n            </button>\n            <button title='Move down cell' className='btn btn-sm btn-warning action-btn'\n                    onClick={moveCell.bind(null, cellId, 'down')}>\n                <i className=\"bi bi-arrow-down\"/>\n            </button>\n            <button title='Delete cell' className='btn btn-sm btn-danger action-btn'\n                    onClick={deleteCell.bind(null, cellId)}>\n                <i className=\"bi bi-x\"/>\n            </button>\n        </div>\n    )\n}\n\nexport default ActionBar","import './textEditor.css'\nimport React, { useEffect, useRef, useState } from 'react'\nimport Meditor from '@uiw/react-md-editor'\nimport { Cell } from '../../state/cell'\nimport useActions from '../../hooks/useActions'\nimport ActionBar from '../ActionBar'\n\ninterface TextEditorCellProps {\n    cell: Cell\n}\n\nconst TextEditor: React.FC<TextEditorCellProps> = ({ cell }) => {\n    const editorRef = useRef<HTMLDivElement | null>(null)\n    const [editing, setEditing] = useState<boolean>(false)\n    const { updateCell } = useActions()\n    useEffect(() => {\n        const listener = function (event: MouseEvent) {\n            if (!(event.target && editorRef.current &&\n                editorRef.current.contains(event.target as Node))) {\n                setEditing(false)\n            }\n        }\n        document.addEventListener('click', listener, { capture: true })\n        return () => document.removeEventListener('click', listener,\n            { capture: true })\n    }, [])\n    if (!editing) return (<div className='card card-body pb-5'>\n        <ActionBar cellId={cell.id}/>\n        <div title='Click to edit' className='text-editor'\n             onClick={setEditing.bind(null, true)}>\n            <Meditor.Markdown source={cell.content || '```# Click to edit```'}/>\n        </div>\n    </div>)\n    return (\n        <div ref={editorRef} className='text-editor card text-cell'>\n            <ActionBar cellId={cell.id}/>\n            <Meditor toolbarHeight={50}\n                     value={cell.content}\n                     onChange={value => updateCell(cell.id, value || '')}/>\n        </div>\n    )\n}\n\nexport default TextEditor\n","import './codeEditor.css'\nimport React, {useRef} from 'react'\nimport MonacoEditor, {OnChange, OnMount} from '@monaco-editor/react'\nimport prettier from 'prettier'\nimport parser from 'prettier/parser-babel'\n\ninterface CodeEditorProps {\n  defaultValue?: string,\n  value: string,\n  handleChange: OnChange\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({defaultValue, value, handleChange}) => {\n  const monacoEditorRef = useRef<any>(null)\n\n  function handleFormat() {\n    try {\n      const unFormattedCode = monacoEditorRef.current.getValue()\n      const formattedCode = prettier.format(unFormattedCode, {\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: true,\n        semi: false,\n        singleQuote: true\n      }).replace(/\\n$/, '')\n      monacoEditorRef.current.setValue(formattedCode)\n    } catch (e) {\n      const message = String(e)\n      alert(message)\n      console.error(e)\n    }\n  }\n\n  const handleMount: OnMount = (editor) => {\n    monacoEditorRef.current = editor\n  }\n\n  return (\n      <div className='editor-wrapper'>\n        {monacoEditorRef.current &&\n        <button className='btn btn-sm btn-outline-success format-btn px-1 py-0'\n                title='Format code'\n                onClick={handleFormat}>\n          <i className=\"bi bi-code-square\"/>\n        </button>}\n        <MonacoEditor\n            value={value}\n            onMount={handleMount}\n            defaultValue={defaultValue}\n            language='javascript'\n            onChange={handleChange}\n            options={{\n              wordWrap: 'on',\n              minimap: {enabled: false},\n              showUnused: true,\n              folding: false,\n              lineNumbersMinChars: 3,\n              fontSize: 16,\n              scrollBeyondLastLine: false,\n              automaticLayout: true\n            }}\n            theme='vs-dark'\n            height='100%'/>\n      </div>\n  )\n}\n\nexport default CodeEditor","import './resizable.css'\nimport React, {PropsWithChildren, useEffect, useState} from 'react'\nimport {ResizableBox, ResizableBoxProps} from 'react-resizable'\n\ninterface ResizableProps {\n  direction: 'horizontal' | 'vertical'\n}\n\nconst Resizable: React.FunctionComponent<PropsWithChildren<ResizableProps>> = ({direction, children}) => {\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight)\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth)\n  const [width, setWidth] = useState(window.innerWidth * 0.5)\n  let resizableProps: ResizableBoxProps\n  if (direction === 'vertical') {\n    resizableProps = {\n      minConstraints: [Infinity, 24],\n      maxConstraints: [Infinity, innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s']\n    }\n  } else {\n    resizableProps = {\n      className: 'resize-horizontal',\n      minConstraints: [innerWidth * 0.2, Infinity],\n      maxConstraints: [innerWidth * 0.5, Infinity],\n      height: Infinity,\n      width: width,\n      resizeHandles: ['e'],\n      onResizeStop: function(_, data) {\n        setWidth(data.size.width)\n      }\n    }\n  }\n  useEffect(() => {\n    const listener = function() {\n      let timer: any\n      if (timer) clearTimeout(timer)\n      timer = setTimeout(() => {\n        setInnerHeight(window.innerHeight)\n        setInnerWidth(window.innerWidth)\n        if (window.innerWidth < width) {\n          setWidth(window.innerWidth * 0.5)\n        }\n      }, 200)\n    }\n    window.addEventListener('resize', listener)\n    return function() {\n      window.removeEventListener('resize', listener)\n    }\n  }, [width])\n  return (\n      <ResizableBox {...resizableProps}>\n        {children}\n      </ResizableBox>\n  )\n}\n\nexport default Resizable","import './preview.css'\nimport React, { useEffect, useRef } from 'react'\n\ninterface PreviewProps {\n    code: string,\n    title?: string,\n    error: string\n}\n\nconst html = `<html lang=\"en\">\n              <head>\n              <title>Preview</title>\n              <style>html {background-color: inherit;}</style>\n              </head>\n              <body><div id=\"root\"/></body>\n              <script>\n                  function handleError(error) {\n                    const root = document.querySelector('#root')\n                    root.innerHTML = '<div style=\"color: red; font-family: sans-serif;\"><h4>Error</h4>' + error + '</div>'\n                    console.error(error)\n                  }\n                  window.addEventListener('error', (event) => {\n                    event.preventDefault()\n                    handleError(event.error)\n                  })\n                  window.addEventListener('message', event => {\n                    try {\n                      eval(event.data)\n                    } catch (e) {\n                        handleError(e)  \n                    }\n                  }, false)\n                  </script>\n              </html> `\n\nconst Preview: React.FC<PreviewProps> = ({ code, error }) => {\n    const iframe = useRef<any>(null)\n    useEffect(() => {\n        iframe.current.srcdoc = html\n        setTimeout(() => {\n            iframe.current.contentWindow.postMessage(code, '*')\n        }, 50)\n    }, [code])\n    return (\n        <div className='preview-wrapper'>\n            <iframe title=\"preview\" sandbox=\"allow-scripts\" ref={iframe}\n                    srcDoc={html}/>\n            {error && <div className='preview-error'>{error}</div>}\n        </div>\n    )\n}\n\nexport default Preview","import useTypedSelector from './useTypedSelector'\n\nconst showFunc = `\n    import _React from 'react'\n    import _ReactDOM from 'react-dom'\n    var show = value => {\n        const root = document.querySelector('#root')\n        if (typeof value === 'object') {\n            if(value.$$typeof && value.props) {\n                _ReactDOM.render(value, root)\n            } else{\n                root.innerHTML = JSON.stringify(value)\n            }\n        } else {\n            root.innerHTML = value\n    }\n}`\n\nconst showFuncNoOp = `var show = () => {}`\n\nconst useCumulativeCode = function (cellId: string) {\n    return useTypedSelector(state => {\n        const {data, order} = state.cells\n        const cumulativeCode = []\n        const cells = order.map(id => data[id])\n        for (const cellKey in cells) {\n            const {type, content, id} = cells[cellKey]\n            if(type === 'code') {\n                if(id === cellId) {\n                    cumulativeCode.push(showFunc)\n                } else {\n                    cumulativeCode.push(showFuncNoOp)\n                }\n                cumulativeCode.push(content)\n            }\n            if(id === cellId) break\n        }\n        return cumulativeCode.join('\\n')\n    })\n}\n\nexport default useCumulativeCode","import React, { Fragment, useEffect } from 'react'\nimport './codeCell.css'\nimport CodeEditor from '../CodeEditor'\nimport Resizable from '../Resizable'\nimport { Cell } from '../../state/cell'\nimport useActions from '../../hooks/useActions'\nimport ActionBar from '../ActionBar'\nimport useTypedSelector from '../../hooks/useTypedSelector'\nimport Preview from '../Preview'\nimport useCumulativeCode from '../../hooks/useCumulativeCode'\n\ninterface CodeCellProps {\n    cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const { updateCell, createBundle } = useActions()\n    const bundle = useTypedSelector(state => state.bundles[cell.id])\n    const cumulativeCode = useCumulativeCode(cell.id)\n    useEffect(() => {\n        if (!bundle) {\n            createBundle(cell.id, cumulativeCode)\n            return\n        }\n        let timer: any\n        timer = setTimeout(async () => {\n            createBundle(cell.id, cumulativeCode)\n        }, 1000)\n        return clearTimeout.bind(null, timer)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cell.id, cumulativeCode, createBundle])\n    return (\n        <div className='code-cell-wrapper'>\n            <Resizable direction='vertical'>\n                <Fragment>\n                    <ActionBar cellId={cell.id}/>\n                    <div className='code-cell'>\n                        <Resizable direction='horizontal'>\n                            <CodeEditor handleChange={(value => value &&\n                                updateCell(cell.id, value))}\n                                        value={cell.content}/>\n                        </Resizable>\n                        <div className='progress-wrapper'>\n                            {!bundle || bundle.loading\n                                ?\n                                <progress\n                                    className='progress-bar-animated progress-cover'\n                                    max='100'>\n                                    Loading\n                                </progress>\n                                : <Preview code={bundle.code}\n                                           error={bundle.error}/>\n                            }\n                        </div>\n                    </div>\n                </Fragment>\n            </Resizable>\n        </div>\n    )\n}\n\nexport default CodeCell","import './cellListItem.css'\nimport React from 'react'\nimport { Cell } from '../../state/cell'\nimport TextEditor from '../TextEditor'\nimport CodeCell from '../CodeCell'\n\ninterface CellListItemProps {\n    cell: Cell\n}\n\nconst CellListItem: React.FC<CellListItemProps> = ({cell}) => {\n    let child: JSX.Element\n    if(cell.type === 'text') {\n        child = <TextEditor cell={cell}/>\n    } else {\n        child = <CodeCell cell={cell}/>\n    }\n    return (\n        <div className='cell-list-item'>\n            {child}\n        </div>\n    )\n}\n\nexport default CellListItem","import React from 'react'\nimport './addCell.css'\nimport useActions from '../../hooks/useActions'\n\ninterface AddCellProps {\n    beforeCellId: string | null,\n    forceVisible?: boolean\n}\n\nconst AddCell: React.FC<AddCellProps> = ({ beforeCellId, forceVisible = false }) => {\n    const { insertAfterCell } = useActions()\n    return (\n        <div className={`add-cell-wrapper ${forceVisible && 'force-visible'}`}>\n            <button className='btn btn-info mx-5'\n                    onClick={insertAfterCell.bind(null, beforeCellId, 'code')}>\n                <i className=\"bi bi-plus-circle\"/> {' '} Code\n            </button>\n            <button className='btn btn-info mx-5'\n                    onClick={insertAfterCell.bind(null, beforeCellId, 'text')}>\n                <i className=\"bi bi-plus-circle\"/> {' '} Text\n            </button>\n            <div className='divider'/>\n        </div>\n    )\n}\n\nexport default AddCell","import React, { Fragment, useEffect } from 'react'\nimport useTypedSelector from '../../hooks/useTypedSelector'\nimport CellListItem from '../CellListItem'\nimport AddCell from '../AddCell'\nimport useActions from '../../hooks/useActions'\n\nconst CellList: React.FC = () => {\n    const { fetchCells } = useActions()\n    const cells = useTypedSelector(\n        ({ cells: { order, data } }) => order.map(id => data[id]))\n    useEffect(() => {\n        fetchCells()\n    }, [fetchCells])\n    return (\n        <Fragment>\n            <AddCell forceVisible={cells.length === 0} beforeCellId={null}/>\n            <div className='my-5'>\n                {cells.map(cell => <Fragment key={cell.id}>\n                    <CellListItem cell={cell} key={cell.id}/>\n                    <AddCell beforeCellId={cell.id}/>\n                </Fragment>)}\n            </div>\n        </Fragment>\n    )\n}\n\nexport default CellList\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-icons/font/bootstrap-icons.css'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport store from './state/store'\nimport CellList from './components/CellList'\n\nfunction App() {\n  return <div className='m-4 p-4'>\n    <Provider store={store}>\n      <div className='card'>\n        <h1 className='text-center mt-1 text-success'>Realtime browser code bundler.</h1>\n      </div>\n      <CellList/>\n    </Provider>\n  </div>\n}\n\nReactDOM.render(<App/>, document.getElementById('root'))\n"],"sourceRoot":""}